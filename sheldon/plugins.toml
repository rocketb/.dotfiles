# sheldon: bash
# ---
# See https://github.com/rossmacarthur/sheldon

shell = "bash"

[plugins.bash-preexec]
# Event pre/post bash hooks implementation.
github = "rcaloras/bash-preexec"

[plugins.complete-alias]
# Complete-alias is used to auto-complete bash aliases.
github = "cykerway/complete-alias"
use = ["complete_alias"]

[plugins.bash-settings]
inline = '''
stty stop undef          # Remove the ^Q mapping
stty start undef         # Remove the ^S mapping (See all: stty -a)
shopt -s cdspell         # Auto-corrects cd misspellings
# shopt -s dirspell        # Auto-corrects cd misspellings
shopt -s cmdhist         # Save multi-line commands in history as single line
shopt -s dotglob         # Include dotfiles in pathname expansion
shopt -s expand_aliases  # Expand aliases
shopt -s extglob         # Enable extended pattern-matching features
shopt -s histreedit      # Add failed commands to the bash history
shopt -s histappend      # Append each session's history to $HISTFILE
shopt -s histverify      # Edit a recalled history line before executing
[[ $DISPLAY ]] && \
	shopt -s checkwinsize  # Update LINES and COLUMNS after each command
'''

[plugins.local-functions]
# My custom functions.
local = "~/.config/bash/functions.d"
use = [ "*.bash" ]

[plugins.vi-mode]
# Enable readline vi-mode for myself only
# See ./functions.d/ssh.bash for implementation
inline = '''
if [ "${LC_IDENTIFICATION:-$USER}" = e5v ] \
	|| [[ "${LC_IDENTIFICATION:-$USER}" == e5v* ]]
then
	set -o vi
fi
'''

[plugins.completions]
local = "~/.config/bash"
use = [ "completion" ]

[plugins.aliases]
local = "~/.config/bash"
use = [ "aliases" ]

# [plugins.local-theme]
# local = "~/.config/bash/themes"
# use = [ "minimal" ]

[plugins.pyenv]
# Work with multiple versions of Python via https://github.com/pyenv/pyenv
# But don't overcast shims when inside an activated virtualenv sub-shell.
inline = '''
if [ -z "$VIRTUAL_ENV" ] && hash pyenv 2>/dev/null; then
	export PYENV_ROOT="${XDG_DATA_HOME}/python/pyenv"
	export PYENV_VIRTUALENV_DISABLE_PROMPT=1
	eval "$(pyenv init --no-push-path -)"
fi
'''

[plugins.vivid]
inline = '''
LS_COLORS="$(vivid generate nord)"
export LS_COLORS
'''

[plugins.fzf]
inline = '''
fzf_keymaps=(
	ctrl-f:preview-half-page-down
	ctrl-b:preview-half-page-up
	ctrl-d:page-down
	ctrl-u:page-up
	ctrl-y:yank
	tab:down
	btab:up
)
keymaps="$(printf ",%s" "${fzf_keymaps[@]}")"
export FZF_DEFAULT_OPTS="--inline-info --reverse --height 50% --bind ${keymaps:1}"
export FZF_DEFAULT_COMMAND='rg --vimgrep --files --follow --hidden --no-ignore-vcs --smart-case --glob !**/.git/*'
'''

[plugins.intelli-shell]
remote = "https://raw.githubusercontent.com/lasantosr/intelli-shell/main/intelli-shell.sh"

[plugins.zoxide]
# Print match path when jumping via 'z'.
inline = '''
if hash zoxide 2>/dev/null; then
	export _ZO_ECHO=1
	export _ZO_DATA_DIR="$XDG_CACHE_HOME/zoxide"
	eval "$(zoxide init bash)"
fi
'''

[plugins.starship]
# Pretty prompt.
inline = 'eval "$(starship init bash)"'

[plugins.atuin]
# Initialize Atuin setup scripts, without the default key-bindings.
# Manually bind <C-r> and <C-p> for history browsing.
inline = '''
if hash atuin 2>/dev/null; then
	eval "$(ATUIN_NOBIND=true atuin init bash)"
	bind -m vi-command -x '"\C-r": __atuin_history'
	bind -m vi-insert  -x '"\C-r": __atuin_history'
	bind -m vi-command -x '"\C-p": __atuin_history --shell-up-key-binding'
	bind -m vi-insert  -x '"\C-p": __atuin_history --shell-up-key-binding'
fi
'''

[plugins.mise]
inline = 'eval "$(mise activate bash)"'
